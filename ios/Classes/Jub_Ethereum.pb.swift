// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Jub_Ethereum.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum JUB_Proto_Ethereum_ENUM_PUB_FORMAT: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case hex // = 0
  case xpub // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .hex
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hex
    case 1: self = .xpub
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .hex: return 0
    case .xpub: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension JUB_Proto_Ethereum_ENUM_PUB_FORMAT: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [JUB_Proto_Ethereum_ENUM_PUB_FORMAT] = [
    .hex,
    .xpub,
  ]
}

#endif  // swift(>=4.2)

struct JUB_Proto_Ethereum_ContextCfgETH {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mainPath: String = String()

  var chainID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct JUB_Proto_Ethereum_TransactionETH {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: JUB_Proto_Common_Bip32Path {
    get {return _storage._path ?? JUB_Proto_Common_Bip32Path()}
    set {_uniqueStorage()._path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return _storage._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {_uniqueStorage()._path = nil}

  var nonce: UInt32 {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  var gasLimit: UInt32 {
    get {return _storage._gasLimit}
    set {_uniqueStorage()._gasLimit = newValue}
  }

  var gasPriceInWei: String {
    get {return _storage._gasPriceInWei}
    set {_uniqueStorage()._gasPriceInWei = newValue}
  }

  var to: String {
    get {return _storage._to}
    set {_uniqueStorage()._to = newValue}
  }

  var valueInWei: String {
    get {return _storage._valueInWei}
    set {_uniqueStorage()._valueInWei = newValue}
  }

  var input: String {
    get {return _storage._input}
    set {_uniqueStorage()._input = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "JUB.Proto.Ethereum"

extension JUB_Proto_Ethereum_ENUM_PUB_FORMAT: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEX"),
    1: .same(proto: "XPUB"),
  ]
}

extension JUB_Proto_Ethereum_ContextCfgETH: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContextCfgETH"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "main_path"),
    2: .same(proto: "chainID"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mainPath)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.chainID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mainPath.isEmpty {
      try visitor.visitSingularStringField(value: self.mainPath, fieldNumber: 1)
    }
    if self.chainID != 0 {
      try visitor.visitSingularUInt32Field(value: self.chainID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JUB_Proto_Ethereum_ContextCfgETH, rhs: JUB_Proto_Ethereum_ContextCfgETH) -> Bool {
    if lhs.mainPath != rhs.mainPath {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_Ethereum_TransactionETH: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionETH"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "nonce"),
    3: .same(proto: "gasLimit"),
    4: .same(proto: "gasPriceInWei"),
    5: .same(proto: "to"),
    6: .same(proto: "valueInWei"),
    7: .same(proto: "input"),
  ]

  fileprivate class _StorageClass {
    var _path: JUB_Proto_Common_Bip32Path? = nil
    var _nonce: UInt32 = 0
    var _gasLimit: UInt32 = 0
    var _gasPriceInWei: String = String()
    var _to: String = String()
    var _valueInWei: String = String()
    var _input: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _path = source._path
      _nonce = source._nonce
      _gasLimit = source._gasLimit
      _gasPriceInWei = source._gasPriceInWei
      _to = source._to
      _valueInWei = source._valueInWei
      _input = source._input
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._path)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._nonce)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._gasLimit)
        case 4: try decoder.decodeSingularStringField(value: &_storage._gasPriceInWei)
        case 5: try decoder.decodeSingularStringField(value: &_storage._to)
        case 6: try decoder.decodeSingularStringField(value: &_storage._valueInWei)
        case 7: try decoder.decodeSingularStringField(value: &_storage._input)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._path {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._nonce != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._nonce, fieldNumber: 2)
      }
      if _storage._gasLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._gasLimit, fieldNumber: 3)
      }
      if !_storage._gasPriceInWei.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gasPriceInWei, fieldNumber: 4)
      }
      if !_storage._to.isEmpty {
        try visitor.visitSingularStringField(value: _storage._to, fieldNumber: 5)
      }
      if !_storage._valueInWei.isEmpty {
        try visitor.visitSingularStringField(value: _storage._valueInWei, fieldNumber: 6)
      }
      if !_storage._input.isEmpty {
        try visitor.visitSingularStringField(value: _storage._input, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JUB_Proto_Ethereum_TransactionETH, rhs: JUB_Proto_Ethereum_TransactionETH) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._path != rhs_storage._path {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._gasLimit != rhs_storage._gasLimit {return false}
        if _storage._gasPriceInWei != rhs_storage._gasPriceInWei {return false}
        if _storage._to != rhs_storage._to {return false}
        if _storage._valueInWei != rhs_storage._valueInWei {return false}
        if _storage._input != rhs_storage._input {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
